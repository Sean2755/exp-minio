image: alpine:latest

variables:
  # KUBE_INGRESS_BASE_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  # KUBE_INGRESS_BASE_DOMAIN: domain.example.com

  DOCKER_DRIVER: overlay2
  ROLLOUT_RESOURCE_TYPE: deployment
  DOCKER_TLS_CERTDIR: ""  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501
  DOCKER_PATH: "docker/"
  DOCKERFILE_PATH: "docker/Dockerfile"
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_FORCE_HTTPS: "true"

stages:
  - build

workflow:
  rules:
    # - if: ('$BUILDPACK_URL || $AUTO_DEVOPS_EXPLICITLY_ENABLED == "1"')  && ( $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "alpha" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH =~ /^(([0-9]+)\.)?([0-9]+)\.x/ || $CI_COMMIT_BRANCH =~ /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ )
    #   when: always
    # - if: $CI_COMMIT_TAG
    #   when: always
    # - when: never  
    - if: ('$BUILDPACK_URL || $AUTO_DEVOPS_EXPLICITLY_ENABLED == "1"')
    - exists:
        - Dockerfile

    # https://github.com/heroku/heroku-buildpack-clojure
    - exists:
        - project.clj

    # https://github.com/heroku/heroku-buildpack-go
    - exists:
        - go.mod
        - Gopkg.mod
        - Godeps/Godeps.json
        - vendor/vendor.json
        - glide.yaml
        - src/**/*.go

    # https://github.com/heroku/heroku-buildpack-gradle
    - exists:
        - gradlew
        - build.gradle
        - settings.gradle

    # https://github.com/heroku/heroku-buildpack-java
    - exists:
        - pom.xml
        - pom.atom
        - pom.clj
        - pom.groovy
        - pom.rb
        - pom.scala
        - pom.yaml
        - pom.yml

    # https://github.com/heroku/heroku-buildpack-multi
    - exists:
        - .buildpacks

    # https://github.com/heroku/heroku-buildpack-nodejs
    - exists:
        - package.json

    # https://github.com/heroku/heroku-buildpack-php
    - exists:
        - composer.json
        - index.php

    # https://github.com/heroku/heroku-buildpack-play
    # TODO: detect script excludes some scala files
    - exists:
        - '**/conf/application.conf'

    # https://github.com/heroku/heroku-buildpack-python
    # TODO: detect script checks that all of these exist, not any
    - exists:
        - requirements.txt
        - setup.py
        - Pipfile

    # https://github.com/heroku/heroku-buildpack-ruby
    - exists:
        - Gemfile

    # https://github.com/heroku/heroku-buildpack-scala
    - exists:
        - '*.sbt'
        - project/*.scala
        - .sbt/*.scala
        - project/build.properties

    # https://github.com/dokku/buildpack-nginx
    - exists:
        - .static

# unit-tests:
#   stage: test
#   image: docker:19.03.11
#   retry: 2 
#   when: manual
#   variables:
#     DOCKER_TLS_CERTDIR: ""
#   services:
#     - docker:19.03.11-dind
#   script:
#     - |
#       if [[ -z "$CI_COMMIT_TAG" ]]; then
#         export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
#       else
#         export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
#       fi
#     - docker build --rm -t $CI_APPLICATION_REPOSITORY:test-$CI_COMMIT_SHORT_SHA -f $DOCKER_PATH/Dockerfile-test .
#     - docker run --rm --entrypoint='' -e REST_API_PORT=8011 -e WEBSOCKET_PORT=8011 -v $(pwd)/reports:/project/reports -v $(pwd)/entrypoint-test.sh:/project/entrypoint-test.sh $CI_APPLICATION_REPOSITORY:test-$CI_COMMIT_SHORT_SHA /project/entrypoint-test.sh
#     - docker rmi $CI_APPLICATION_REPOSITORY:test-$CI_COMMIT_SHORT_SHA
#   artifacts:
#     reports:
#       junit:
#         - ./reports/*.xml
#   rules:
#     - if: '( $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" ) '
#       when: always
#     - when: manual
#       allow_failure: true

########################################
#  Build Docker images by manually
#
#   Sean
#
#######################################
build_docker_image_by_manually:
  stage: build
  image: 'registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:v1.0.0'
  when: manual
  variables:
    DOCKER_TLS_CERTDIR: ''
    WEB_PATH: '/legacy'
  services:
    - name: 'docker:20.10.6-dind'
      command: ['--tls=false', '--host=tcp://0.0.0.0:2375']
  before_script:
    - apk update && apk add openssh && apk add bash  && apk add git
  script:
    - export BUILD_TIME=$(git show -s --date=format:'%Y-%m-%d-%H%M%S' --format=%cd)
    - export BUILD_VERSION=${BUILD_VERSION:-${CI_PIPELINE_IID}_${BUILD_TIME}}
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$BUILD_VERSION}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
  #  - /build/build.sh
    - |
      if [[ -n "$CI_REGISTRY" && -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging in to GitLab Container Registry with CI credentials..."
        echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
      fi
    - docker build --network host -t $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG -t $CI_APPLICATION_REPOSITORY:latest  -f $DOCKERFILE_PATH .
    - docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    - docker push "$CI_APPLICATION_REPOSITORY:latest"

########################################
#  Build Docker images
#
#   Sean
#
#######################################
build_docker_image:
  stage: build
  image: 'registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:v1.0.0'
  variables:
    DOCKER_TLS_CERTDIR: ''
    WEB_PATH: '/legacy'
  services:
    - name: 'docker:20.10.6-dind'
      command: ['--tls=false', '--host=tcp://0.0.0.0:2375']
  before_script:
    - apk update && apk add openssh && apk add bash  && apk add git
  script:
    - export BUILD_TIME=$(git show -s --date=format:'%Y-%m-%d-%H%M%S' --format=%cd)
    - export BUILD_VERSION=${BUILD_VERSION:-${CI_PIPELINE_IID}_${BUILD_TIME}}
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$BUILD_VERSION}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
  #  - /build/build.sh
    - |
      if [[ -n "$CI_REGISTRY" && -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging in to GitLab Container Registry with CI credentials..."
        echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
      fi
    - docker build --network host -t $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG -t $CI_APPLICATION_REPOSITORY:latest -f $DOCKERFILE_PATH .
    - docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    - docker push "$CI_APPLICATION_REPOSITORY:latest"
  rules:
    - if: '$BUILD_DISABLED'
      when: never
    - if: '($CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop")'




include:
  - template: Dependency-Scanning.gitlab-ci.yml

  # - template: Jobs/Build.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/Build.gitlab-ci.yml
  # - template: Jobs/Test.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/Test.gitlab-ci.yml
  # - template: Jobs/Code-Quality.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/Code-Quality.gitlab-ci.yml
  # - template: Jobs/Deploy.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/Deploy.gitlab-ci.yml
  # - template: Jobs/DAST-Default-Branch-Deploy.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/DAST-Default-Branch-Deploy.gitlab-ci.yml
  # - template: Jobs/Browser-Performance-Testing.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/Browser-Performance-Testing.gitlab-ci.yml
  # - template: Security/DAST.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/DAST.gitlab-ci.yml
  # - template: Security/Container-Scanning.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml
  # - template: Security/Dependency-Scanning.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/Dependency-Scanning.gitlab-ci.yml
  # - template: Security/License-Scanning.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/SAST.gitlab-ci.yml
  # - project: 'geminidata/shared/gitlab/gitlab-templates'
  #   ref: develop
  #   file: '/gitlab-ci/push-tagged-image.yml'
  # - project: 'geminidata/shared/gitlab/gitlab-cicd-templates'
  #   ref: master
  #   file: 'deploy_ci_templates.yml'
  - project: 'geminidata/shared/gitlab/gitlab-cicd-templates'
    ref: master
    file: 'update_explore_submodules.yml'
  - project: "geminidata/shared/gitlab/gitlab-cicd-templates"
    ref: master
    file: "pushtag_ci_templates.yaml"
  - project: "geminidata/shared/gitlab/gitlab-cicd-templates"
    ref: master
    file: 'deploy_register_sleuth.yaml'
  - project: 'geminidata/shared/gitlab/gitlab-cicd-templates'
    ref: master
    file: 'helm_publish_templates.yaml'
